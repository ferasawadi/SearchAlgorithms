package com.yafatek;import java.util.LinkedList;import java.util.Queue;import java.util.concurrent.locks.Condition;import java.util.concurrent.locks.ReentrantLock;public class StorageQueueImpl<T> {	private Queue<T> queue;	private int size;	private ReentrantLock lock = new ReentrantLock(true);	private Condition notEmpty = lock.newCondition();	private Condition notFull = lock.newCondition();	public StorageQueueImpl(int size) {		this.size = size;		queue = new LinkedList<>();	}	public void put(T item) throws InterruptedException {		lock.lock();		try {			while (queue.size() == size) {				notFull.await();			}			queue.add(item);			notFull.signalAll();		} finally {			lock.unlock();		}	}	public T take() throws InterruptedException {		lock.lock();		try {			while (queue.isEmpty()) {				notEmpty.await();			}			notEmpty.signalAll();			return queue.remove();		} finally {			lock.unlock();		}	}}