package com.yafatek;public class StackPractice {	private int[] array;	private int top;	private int capacity;	public StackPractice(int capacity) {		this.array = new int[capacity];		this.capacity = capacity;		this.top = -1;	}	public StackPractice() {	}	private void push(int item) {		if (isFull()) {			throw new RuntimeException("Stack is Full");		}		array[++top] = item;	}	public static void main(String[] args) {		// Test.		StackPractice stackPractice = new StackPractice(5);//		stackPractice.push(1);//		stackPractice.push(2);//		stackPractice.push(3);//		stackPractice.push(4);//		stackPractice.push(5);		System.out.println("Pop Top Item: " + stackPractice.pop());		System.out.println("Peek top Item: " + stackPractice.peek());		stackPractice.push(6);		stackPractice.push(7);	}	private int peek() {		if (isEmpty()) {			throw new RuntimeException("error peek an item, Stack is Empty!");		}		return array[top];	}	private boolean isFull() {		return top == capacity - 1;	}	private boolean isEmpty() {		return top == -1;	}	private int pop() {		if (isEmpty()) {			throw new RuntimeException("Error Pop an item, Stack is Empty!");		}		return array[top--];	}}